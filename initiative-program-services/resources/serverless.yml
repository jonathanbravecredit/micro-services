# NOTE: update this with your service name
service: initiative-program-resources

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  environment:
    OUR_ENV: ${self:provider.stage}

resources:
  Resources:
    InitiativePrograms:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
          - AttributeName: 'program'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
          - AttributeName: 'program'
            KeyType: 'RANGE'
        BillingMode: PAY_PER_REQUEST
        TableName: InitiativePrograms_old
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    InitiativeProgramSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.stage}-initiative-program-topic

    # Create our 'MailchimpQueue' Dead Letter Queue SQS queue
    InitiativeProgramQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.stage}-initiative-program-dlq
        ReceiveMessageWaitTimeSeconds: 20

    # Create our 'MailchimpQueue' SQS queue
    InitiativeProgramQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:provider.stage}-initiative-program-sqs
        ReceiveMessageWaitTimeSeconds: 20
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt
            - InitiativeProgramQueueDLQ
            - Arn
          maxReceiveCount: 3
        VisibilityTimeout: 720

    # Create our queue policy for the 'MailchimpQueue'
    SnsToInitiativeProgramQueueSqsPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: 'allow-sns-messages'
              Effect: Allow
              Principal: '*'
              Resource: !GetAtt
                - InitiativeProgramQueue
                - Arn
              Action: 'SQS:SendMessage'
              Condition:
                ArnEquals:
                  'aws:SourceArn': !Ref InitiativeProgramSNSTopic
        Queues:
          - Ref: InitiativeProgramQueue

    # Create the subscription to the 'queue
    InitiativeProgramQueueSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: !Ref InitiativeProgramSNSTopic
        Endpoint: !GetAtt
          - InitiativeProgramQueue
          - Arn
        Protocol: sqs
        FilterPolicy:
          service:
            - initiativeprogram
        RawMessageDelivery: 'true'

  Outputs:
    InitiativeProgramTable:
      Description: 'Initiative program table'
      Value: !Ref InitiativePrograms
      Export:
        Name: !Sub '${self:service}-table'
    InitiativeProgramTableStreamArn:
      Value: { 'Fn::GetAtt': ['InitiativePrograms', 'StreamArn'] }
      Export:
        Name: !Sub '${self:service}-stream'
    InitiativeProgramQueueArn:
      Description: 'Initiative program queue ARN'
      Value: !GetAtt InitiativeProgramQueue.Arn
      Export:
        Name: !Sub '${self:service}-sqs-arn'
    InitiativeProgramTopicArn:
      Description: 'Initiative program SNS ARN'
      Value: !Ref InitiativeProgramSNSTopic
      Export:
        Name: !Sub '${self:service}-sns-arn'
