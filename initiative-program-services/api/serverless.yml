# NOTE: update this with your service name
service: initiative-program-api

# Create an optimized package for our functions
package:
  individually: true

custom:
  bundle:
    linting: false
    externals:
      - dynamo-easy

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  environment:
    OUR_ENV: ${self:provider.stage}
  apiGateway:
    restApiId: !ImportValue web-api-resources-apigw-id
    restApiRootResourceId: !ImportValue web-api-resources-apigw-initiativeresource
  iamRoleStatements:
    - Effect: 'Allow'
      Action: 'sns:Publish'
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - dynamodb:ListStreams
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/InitiativePrograms'

functions:
  # User tracked initiatives
  getInitiatives:
    handler: src/http/initiatives/get.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - http:
          path: /
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !ImportValue web-api-resources-apigw-authorizer

  createInitiativeSub:
    handler: src/subs/initiatives/post.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - sqs:
          arn:
            Fn::ImportValue: 'initiative-program-resources-sqs-arn'
          batchSize: 1
          maximumBatchingWindow: 5

  updateInitiativeSub:
    handler: src/subs/initiatives/put.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - sqs:
          arn:
            Fn::ImportValue: 'initiative-program-resources-sqs-arn'
          batchSize: 1
          maximumBatchingWindow: 5

  # # Initiative Programs
  # createPrograms:
  #   handler: src/http/initiatives/programs/post.main
  #   onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  #   events:
  #     - http:
  #       path: initiatives/programs
  #       method: post
  #       cors: true
  #       authorizer:
  #         type: COGNITO_USER_POOLS
  #         authorizerId: !ImportValue web-api-resources-apigw-authorizer

  # updatePrograms:
  #   handler: src/http/initiatives/programs/put.main
  #   onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  #   events:
  #     - http:
  #       path: initiatives/programs
  #       method: put
  #       cors: true
  #       authorizer:
  #         type: COGNITO_USER_POOLS
  #         authorizerId: !ImportValue web-api-resources-apigw-authorizer
