frameworkVersion: "^2.15.0"
service: mailchimp-service-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  stage: ${opt:stage, 'dev'}
  bundle:
    # external: all
    linting: false
    aliases:
      - "libs": libs
      - "src": src
      - "tests": tests
    sourcemaps: false
    disableForkTsChecker: true
    fixPackages: # Include fixes for specific packages
      - "formidable@1.x"

  settings:
    POOL:
      dev: "us-east-2_beTcykTM9"
      qa: "us-east-2_beTcykTM9"
      staging: "us-east-2_80pbK9Kx7"
      prod: "us-east-2_R22DawoAR"
    APPDATA:
      dev: "rr5wtr4ev5exlbutrkih3r5lhq:GetAtt:AppDataTable:StreamArn"
      qa: "rr5wtr4ev5exlbutrkih3r5lhq:GetAtt:AppDataTable:StreamArn"
      staging: "mza6aevpsvef5btykbyjp5ffdm:GetAtt:AppDataTable:StreamArn"
      prod: "4tpaga7rzjayhk75opsmpeurme:GetAtt:AppDataTable:StreamArn"
    APPTABLES:
      dev: "AppData-rr5wtr4ev5exlbutrkih3r5lhq-dev"
      qa: "AppData-rr5wtr4ev5exlbutrkih3r5lhq-dev"
      staging: "AppData-mza6aevpsvef5btykbyjp5ffdm-staging"
      prod: "AppData-4tpaga7rzjayhk75opsmpeurme-prod"

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  environment:
    STAGE: ${opt:stage, self:provider.stage}
    APPTABLE: ${self:custom.settings.APPTABLES.${opt:stage}}
    EMAIL: "support@brave.credit"
    DOMAIN: "brave.credit"
    POOL: ${self:custom.settings.POOL.${opt:stage}}
    MAILCHIMP_DEQUEUE_SNS_ARN:
      Fn::ImportValue: !Sub "${self:provider.stage}-mailchimp-service-resources-dequeue-topic"
    MAILCHIMP_SNS_ARN:
      Fn::ImportValue: !Sub "${self:provider.stage}-mailchimp-service-resources-topic"
    MAILCHIMP_SQS_ARN:
      Fn::ImportValue: !Sub "${self:provider.stage}-mailchimp-service-resources-sqs-arn"
    MAILCHIMP_SECRET_LOCATION: !Sub "${self:provider.stage}/mailchimp-services/mailchimpTx"
    MAILCHIMP_MRKT_SECRET_LOCATION: !Sub "${self:provider.stage}/mailchimp-services/mailchimpMrkt"
  timeout: 60
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - secretsmanager:GetSecretValue
      Resource:
        - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${self:provider.stage}/mailchimp-services/mailchimpTx-*"
        - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${self:provider.stage}/mailchimp-services/mailchimpMrkt-*"
    - Effect: "Allow"
      Action:
        - dynamodb:ListStreams
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/MailchimpData"
        - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Disputes"
        - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/CreditScoreTrackings"
        - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/CreditReports"
        - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Referrals"
        - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Campaigns"
        - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.settings.APPTABLES.${opt:stage}}"
        - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Disputes/*"
        - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/CreditScoreTrackings/*"
        - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Referrals/*"
        - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Campaigns/*"
        - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/InitiativePrograms"
        - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/InitiativePrograms/*"
        - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.settings.APPTABLES.${opt:stage}}/*"
    - Effect: "Allow"
      Action:
        - "cognito-idp:ListUsers"
        - "cognito-idp:AdminGetUser"
      Resource: !Sub "arn:aws:cognito-idp:${self:provider.region}:${AWS::AccountId}:userpool/*"
    - Effect: "Allow"
      Action: "sns:Publish"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
        - "ses:SendRawEmail"
      Resource: "*"

functions:
  dequeueEmailMessages:
    handler: src/subscriptions/dequeueEmailMessages.main
    description: Sends enqueued mailchimp emails
    events:
      - sns:
          arn: ${self:provider.environment.MAILCHIMP_DEQUEUE_SNS_ARN}
          topicName: MailchimpDequeueSNSTopic
          integration: lambda-proxy

  sendScheduledMessages:
    handler: src/handlers/sendScheduledMessages.main
    description: Sends scheduled mailchimp emails
    onError: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue"
    events:
      - schedule: cron(0 16 * * ? *)

  batchMarketingTag:
    handler: src/handlers/batchMarketingTag.main
    description: Force tags user emails with marketing tags even if no event occurs
    onError: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue"
    timeout: 120
    # events:
    # - schedule: cron(0 0 15 * ? *) # manual trigger for now
  batchMarketingTagWorker:
    handler: src/handlers/batchMarketingTagWorker.main
    description: Force tags user emails with marketing tags even if no event occurs
    onError: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue"
    timeout: 120
    events:
      - sqs:
          arn:
            Fn::ImportValue: "${self:custom.stage}-mailchimp-service-resources-sqs-arn"
          batchSize: 1
          maximumBatchingWindow: 5

  # app table triggers
  triggerTransactionalEmail:
    handler: src/triggers/triggerTransactionalEmail.main
    description: Monitors app database for events that trigger transactional emails
    onError: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue"
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn: !ImportValue ${self:custom.settings.APPDATA.${opt:stage}}
  # marketing tags such as setting defaults and whether enrolled
  triggerAppDataForMarketing:
    handler: src/triggers/triggerAppDataForMarketing.main
    description: Monitors app database for events that trigger marketing emails
    onError: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue"
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn: !ImportValue ${self:custom.settings.APPDATA.${opt:stage}}

  # dispute table triggers
  triggerDisputeTransactionalEmail:
    handler: src/triggers/triggerDisputeTransactionalEmail.main
    description: Monitors dispute database for events that trigger dispute transactional emails
    onError: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue"
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn: !ImportValue agency-services-transunion-disputes-stream
  triggerDisputeMarketingEmail:
    handler: src/triggers/triggerDisputeMarketingEmail.main
    description: Monitors dispute database for events that trigger dispute transactional emails
    onError: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue"
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn: !ImportValue agency-services-transunion-disputes-stream

  # credit report table triggers
  triggerCreditReportEmail:
    handler: src/triggers/triggerCreditReportEmail.main
    description: Monitors credit report table for events that trigger marketing tags or emails
    onError: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue"
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn: !ImportValue credit-report-service-resources-stream

  triggerCreditReportForMarketing:
    handler: src/triggers/triggerCreditReportForMarketing.main
    description: Monitors credit report table for events that trigger marketing tags or emails
    onError: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue"
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn: !ImportValue credit-report-service-resources-stream

  # referral table triggers
  triggerReferralEmail:
    handler: src/triggers/triggerReferralEmail.main
    description: Monitors referral system to send a email with referral code embedded when new recored added
    onError: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue"
    events:
      - stream:
          type: dynamodb
          batchSize: 10
          startingPosition: LATEST
          arn: !ImportValue referral-service-referrals-stream
  triggerReferralMarketingEmail:
    handler: src/triggers/triggerReferralMarketingEmail.main
    description: Monitors referral system to trigger marketing tags or emails
    onError: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue"
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn: !ImportValue referral-service-referrals-stream
  # initiative program table triggers
  triggerInitiativeProgramMarketing:
    handler: src/triggers/triggerInitiativeProgramMarketing.main
    description: Monitors initiative program system tables to add user tags
    onError: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue"
    events:
      - stream:
          type: dynamodb
          batchSize: 10
          startingPosition: LATEST
          arn: !ImportValue initiative-program-resources-stream

  # referral table triggers
  triggerWaitlistEmail:
    handler: src/triggers/triggerWaitlistEmail.main
    description: Monitors waitlist system to send an email with referral code embedded when new recored added
    onError: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue"
    events:
      - stream:
          type: dynamodb
          batchSize: 10
          startingPosition: LATEST
          arn: !ImportValue waitlist-service-resources-waitlist-table-arn

  # when changes to specific accounts occur, trigger the badge on the notification bar
  #  this should be moved to the credit report service
  monitorForNotifications:
    handler: src/monitors/monitorForNotifications.main
    description: Monitors marketing tags to turn on and off badges in nav bar
    onError: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue"
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn:
            Fn::ImportValue: credit-report-service-resources-stream
