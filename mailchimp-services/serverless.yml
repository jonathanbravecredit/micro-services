# frameworkVersion: '2.15.0'
service: mailchimp-service

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  bundle:
    external: all
    linting: false
    sourcemaps: true
    fixPackages: # Include fixes for specific packages
      - 'formidable@1.x'
  snsProxy: !Sub '${self:provider.stage}-api-endpoints-sns-proxy'
  settings:
    POOL:
      dev: 'us-east-2_beTcykTM9'
      qa: 'us-east-2_beTcykTM9'
      prod: 'us-east-2_R22DawoAR'
    APPDATA:
      dev: 'rr5wtr4ev5exlbutrkih3r5lhq:GetAtt:AppDataTable:StreamArn'
      qa: 'rr5wtr4ev5exlbutrkih3r5lhq:GetAtt:AppDataTable:StreamArn'
      prod: '4tpaga7rzjayhk75opsmpeurme:GetAtt:AppDataTable:StreamArn'
    APPTABLES:
      dev: 'AppData-rr5wtr4ev5exlbutrkih3r5lhq-dev'
      prod: 'AppData-4tpaga7rzjayhk75opsmpeurme-prod'

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  environment:
    STAGE: ${opt:stage, self:provider.stage}
    TABLENAME1: MailchimpData
    CREDIT_SCORE_TABLE: CreditScoreTrackings
    CREDIT_SCORE_STREAM: 'GetAtt:CreditScoreTrackings;StreamArn'
    DISPUTES_TABLE: Disputes
    DISPUTES_STREAM: 'GetAtt:Disputes;StreamArn'
    REFERRALS_TABLE: Referrals
    APPTABLE: ${self:custom.settings.APPTABLES.${opt:stage}}
    EMAIL: 'support@brave.credit'
    DOMAIN: 'brave.credit'
    POOL: ${self:custom.settings.POOL.${opt:stage}}
    SNS_PROXY_ARN: !ImportValue ${self:custom.snsProxy}
    MAILCHIMP_SNS_ARN: !Ref MailchimpSNSTopic
    MAILCHIMP_SECRET_LOCATION: '${self:provider.stage}/mailchimp-services/mailchimpTx'
    MAILCHIMP_MRKT_SECRET_LOCATION: '${self:provider.stage}/mailchimp-services/mailchimpMrkt'
  timeout: 60
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - secretsmanager:GetSecretValue
      Resource:
        - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${self:provider.stage}/mailchimp-services/mailchimpTx-*'
        - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${self:provider.stage}/mailchimp-services/mailchimpMrkt-*'
    - Effect: 'Allow'
      Action:
        - dynamodb:ListStreams
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/MailchimpData'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Disputes'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/CreditScoreTrackings'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/CreditReports'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Referrals'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.settings.APPTABLES.${opt:stage}}'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Disputes/*'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/CreditScoreTrackings/*'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Referrals/*'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.settings.APPTABLES.${opt:stage}}/*'
    - Effect: 'Allow'
      Action:
        - 'cognito-identity:*'
        - 'cognito-sync:*'
        - 'cognito-idp:*'
      Resource: '*'
    - Effect: 'Allow'
      Action: 'sns:Publish'
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - 'ses:SendEmail'
        - 'ses:SendRawEmail'
      Resource: '*'

functions:
  dequeueEmailMessages:
    handler: src/subscriptions/dequeueEmailMessages.main
    description: Sends enqueued mailchimp emails
    events:
      - sns:
          arn: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:SnsProxyTopic'
          topicName: SnsProxyTopic
          integration: lambda-proxy

  sendScheduledMessages:
    handler: src/handlers/sendScheduledMessages.main
    description: Sends scheduled mailchimp emails
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - schedule: cron(0 16 * * ? *)

  batchMarketingTag:
    handler: src/handlers/batchMarketingTag.main
    description: Force tags user emails with marketing tags even if no event occurs
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    timeout: 120
    # events:
    # - schedule: cron(0 0 15 * ? *) # manual trigger for now
  batchMarketingTagWorker:
    handler: src/handlers/batchMarketingTagWorker.main
    description: Force tags user emails with marketing tags even if no event occurs
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    timeout: 120
    events:
      - sqs:
          arn: !GetAtt
            - MailchimpQueue
            - Arn
          batchSize: 100
          maximumBatchingWindow: 5
    # events:
    # - schedule: cron(0 0 15 * ? *) # manual trigger for now

  # app table triggers
  triggerTransactionalEmail:
    handler: src/triggers/triggerTransactionalEmail.main
    description: Monitors app database for events that trigger transactional emails
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn:
            Fn::ImportValue: '${self:custom.settings.APPDATA.${opt:stage}}'

  triggerAppDataForMarketing:
    handler: src/triggers/triggerAppDataForMarketing.main
    description: Monitors app database for events that trigger marketing emails
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn:
            Fn::ImportValue: credit-report-service-resources-stream

  # dispute table triggers
  triggerDisputeTransactionalEmail:
    handler: src/triggers/triggerDisputeTransactionalEmail.main
    description: Monitors dispute database for events that trigger dispute transactional emails
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn: !ImportValue agency-services-transunion-disputes-stream
  triggerDisputeMarketingEmail:
    handler: src/triggers/triggerDisputeMarketingEmail.main
    description: Monitors dispute database for events that trigger dispute transactional emails
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn: !ImportValue agency-services-transunion-disputes-stream

  # credit score table triggers
  triggerCreditScoreMarketingEmail:
    handler: src/triggers/triggerCreditScoreMarketingEmail.main
    description: Monitors credit score table for events that trigger marketing tags or emails
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn: !ImportValue agency-services-transunion-creditscoretrackings-stream

  # referral table triggers
  triggerReferralEmail:
    handler: src/triggers/triggerReferralEmail.main
    description: Monitors referral system to send a email with referral code embedded when new recored added
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn: !ImportValue referral-service-referrals-stream
  triggerReferralMarketingEmail:
    handler: src/triggers/triggerReferralMarketingEmail.main
    description: Monitors referral system to trigger marketing tags or emails
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn: !ImportValue referral-service-referrals-stream

  monitorForNotifications:
    handler: src/monitors/monitorForNotifications.main
    description: Monitors marketing tags to turn on and off badges in nav bar
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn:
            Fn::ImportValue: credit-report-service-resources-stream

resources:
  Resources:
    MailchimpSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.stage}-${self:service}-sns-topic

    # Create our 'MailchimpQueue' SQS queue
    MailchimpQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:provider.stage}-${self:service}-sqs
        ReceiveMessageWaitTimeSeconds: 20
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt
            - MailchimpQueueDLQ
            - Arn
          maxReceiveCount: 3
        VisibilityTimeout: 720

    # Create our 'MailchimpQueue' Dead Letter Queue SQS queue
    MailchimpQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.stage}-${self:service}-dlq
        ReceiveMessageWaitTimeSeconds: 20

    # Create our queue policy for the 'MailchimpQueue'
    SnsToMailchimpQueueSqsPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: 'allow-sns-messages'
              Effect: Allow
              Principal: '*'
              Resource: !GetAtt
                - MailchimpQueue
                - Arn
              Action: 'SQS:SendMessage'
              Condition:
                ArnEquals:
                  'aws:SourceArn': ${self:provider.environment.MAILCHIMP_SNS_ARN}
        Queues:
          - Ref: MailchimpQueue

    # Create the subscription to the 'queue
    MailchimpQueueSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: ${self:provider.environment.MAILCHIMP_SNS_ARN}
        Endpoint: !GetAtt
          - MailchimpQueue
          - Arn
        Protocol: sqs
        FilterPolicy:
          service:
            - mailchimpbatch
        RawMessageDelivery: 'true'

    MailchimpData:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: 'userId'
            AttributeType: 'S'
          - AttributeName: 'messageId'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'userId'
            KeyType: 'HASH'
          - AttributeName: 'messageId'
            KeyType: 'RANGE'
        BillingMode: PAY_PER_REQUEST
        TableName: MailchimpData
        StreamSpecification:
          StreamViewType: NEW_IMAGE
