# NOTE: update this with your service name
service: credit-report-services-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  bundle:
    linting: false

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  environment:
    OUR_ENV: ${self:provider.stage}
    SECURITY_GROUPS: !ImportValue agency-services-transunion-vpc-natsecuritygroup
    SUBNETS: !ImportValue agency-services-transunion-subnets-private
    CREDIT_REPORT_METRICS_SNS_TOPIC: !ImportValue credit-report-service-resources-metrics-sns-arn
  vpc:
    securityGroupIds: { 'Fn::Split': [',', { 'Fn::ImportValue': 'agency-services-transunion-vpc-natsecuritygroup' }] }
    subnetIds: { 'Fn::Split': [',', { 'Fn::ImportValue': 'agency-services-transunion-subnets-private' }] }
  apiGateway:
    restApiId: !ImportValue web-api-resources-apigw-id
    restApiRootResourceId: !ImportValue web-api-resources-apigw-rootresource
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource: '*'
    - Effect: 'Allow'
      Action: 'sns:Publish'
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - dynamodb:ListStreams
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/CreditReports'

functions:
  getCreditReport:
    handler: src/api/creditreports/get.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - http:
          path: creditreport
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !ImportValue web-api-resources-apigw-authorizer

  createCreditReport:
    handler: src/subs/creditreports/create.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - sqs:
          arn:
            Fn::ImportValue: 'credit-report-service-resources-sqs-arn'
          batchSize: 1
          maximumBatchingWindow: 5

  # publishers
  pubCreditReportMetrics:
    handler: src/pubs/metrics/pubCreditReportMetrics.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn:
            Fn::ImportValue: credit-report-service-resources-stream
