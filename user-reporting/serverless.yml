# frameworkVersion: '2.3.0'
service: user-reporting

package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-pseudo-parameters
  - serverless-dotenv-plugin

custom:
  stage: ${opt:stage, self:provider.stage}
  bundle:
    sourcemaps: true
    linting: false
    externals:
      - nodemailer
  settings:
    POOL:
      dev: 'us-east-2_beTcykTM9'
      qa: 'us-east-2_beTcykTM9'
      staging: 'us-east-2_6RQqasoH3'
      prod: 'us-east-2_R22DawoAR'
    APPDATA:
      dev: 'AppData-rr5wtr4ev5exlbutrkih3r5lhq-dev'
      qa: 'AppData-rr5wtr4ev5exlbutrkih3r5lhq-dev'
      staging: 'AppData-mza6aevpsvef5btykbyjp5ffdm-staging'
      prod: 'AppData-4tpaga7rzjayhk75opsmpeurme-prod'
    GRAPHQL_APIENDPOINTOUTPUT: !ImportValue GraphQLAPIEndpointOutput
    GRAPHQL_API:
      dev: 'rr5wtr4ev5exlbutrkih3r5lhq'
      qa: 'rr5wtr4ev5exlbutrkih3r5lhq'
      staging: 'mza6aevpsvef5btykbyjp5ffdm'
      prod: '4tpaga7rzjayhk75opsmpeurme'
    GRAPHQL_ENDPOINT:
      dev: '24ga46y3gbgodogktqwhh7vryq.appsync-api.us-east-2.amazonaws.com'
      qa: '24ga46y3gbgodogktqwhh7vryq.appsync-api.us-east-2.amazonaws.com'
      staging: 'xte3obhdpfbhfbxekxpfa2tcwq.appsync-api.us-east-2.amazonaws.com'
      prod: 'krybm5pc3nbgdk4zwgcva2i4va.appsync-api.us-east-2.amazonaws.com'

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  timeout: 900
  environment:
    ACCOUNT_ID: '#{AWS::AccountId}'
    STAGE: ${opt:stage, self:provider.stage}
    POOL: ${self:custom.settings.POOL.${opt:stage}}
    APPSYNC_ENDPOINT: '${self:custom.settings.GRAPHQL_ENDPOINT.${opt:stage}}'
    APPSYNC_API: '${self:custom.settings.GRAPHQL_API.${opt:stage}}'
    APPDATA: '${self:custom.settings.APPDATA.${opt:stage}}'
    OPSBATCH_SNS_ARN: !Ref OpsBatchSNSTopic
  iamRoleStatements:
    - Effect: Allow
      Resource:
        - !Sub 'arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${self:custom.settings.GRAPHQL_API.${opt:stage}}/types/Query/*'
        - !Sub 'arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${self:custom.settings.GRAPHQL_API.${opt:stage}}/types/Mutation/*'
        - !Sub 'arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${self:custom.settings.GRAPHQL_API.${opt:stage}}/types/Subscription/*'
      Action: 'appsync:GraphQL'
    - Effect: 'Allow'
      Action:
        - dynamodb:ListStreams
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - !Sub 'arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:provider.environment.APPDATA}'
        - !Sub 'arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/Referrals'
        - !Sub 'arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/Analytics'
        - !Sub 'arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/CreditScores'
        - !Sub 'arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/CreditReports'
        - !Sub 'arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/Disputes'
        - !Sub 'arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/InvestigationResults'
        - !Sub 'arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/CreditBureauReportResults'
        - !Sub 'arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/APITransactionLog'
        - !Sub 'arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/APITransactionLog/index/*'
        - !Sub 'arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/OpsReports'
        - !Sub 'arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/OpsReports/index/*'
    - Effect: 'Allow'
      Action:
        - cognito-idp:ListUsers
        - cognito-idp:AdminDisableUser
        - cognito-idp:AdminDeleteUser
        - cognito-idp:AdminGetUser
      Resource: 'arn:aws:cognito-idp:${self:provider.region}:#{AWS::AccountId}:userpool/*'
    - Effect: 'Allow'
      Action:
        - 'ses:SendEmail'
        - 'ses:SendRawEmail'
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource: '*'
    - Effect: 'Allow'
      Action: 'sns:Publish'
      Resource: '*'

functions:
  # COMPILE AND CLEANUP
  cleanUpAllReports:
    handler: src/handlers/cleanup/cleanUpReportsAll.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - schedule: cron(0 12 * * ? *) # run every morning at 4:30 AM (PST)
  compileAllReports:
    handler: src/handlers/compilers/compileAllReports.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    # events:
    # - schedule: cron(30 9 * * ? *) # run every morning at 1:30 AM (PST) # needs work

  # WORKER
  opsBatchWorker:
    handler: src/subscriptions/opsBatchWorker.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    timeout: 120
    reservedConcurrency: 5
    events:
      - sqs:
          arn: !GetAtt
            - OpsBatchQueue
            - Arn
          batchSize: 1
          maximumBatchingWindow: 5

  # BATCHED SCHEDULED
  triggerEnrollmentsYTD:
    handler: src/triggers/triggerEnrollmentsYTD.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - schedule: cron(0 7 * * ? *) # run every morning at 12:30 AM
  triggerFailuresYTD:
    handler: src/triggers/triggerFailuresYTD.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - schedule: cron(15 7 * * ? *) # run every morning at 12:00 AM
  triggerReferralsAll:
    handler: src/triggers/triggerReferralsAll.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - schedule: cron(0 7 * * ? *) # run every morning at 12:15 AM

  # BATCHED COMPILERS
  compileEnrollmentsYTD:
    handler: src/handlers/compilers/compileEnrollmentsYTD.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - schedule: cron(0 9 * * ? *) # run every morning at 1:00 AM
  compileFailuresYTD:
    handler: src/handlers/compilers/compileFailuresYTD.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - schedule: cron(15 9 * * ? *) # run every morning at 1:30 AM
  compileReferralsAll:
    handler: src/handlers/compilers/compileReferralsAll.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - schedule: cron(30 9 * * ? *) # run every morning at 1:15 AM
  compileUserAggregationMetrics:
    handler: src/handlers/compilers/compileUserAggregationReport.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'

  # BATCHED MANUAL
  # no report report
  triggerNoReportReport:
    handler: src/triggers/triggerNoReportReport.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  triggerActionsYTD:
    handler: src/triggers/triggerActionsYTD.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  triggerAuthenticationLogAll:
    handler: src/triggers/triggerAuthenticationLogAll.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  triggerMonthlyLogInReport:
    handler: src/triggers/triggerMonthlyLogInReport.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  triggerMissingDisputeKeyReport:
    handler: src/triggers/triggerMissingDisputeKeyReport.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  triggerDisputeErrors:
    handler: src/triggers/triggerDisputeErrors.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  triggerUserEmployerAll:
    handler: src/triggers/triggerUserEmployerAll.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  triggerFailedFulfill:
    handler: src/triggers/triggerFailedFulfill.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  triggerRegistrationsYTDReport:
    handler: src/triggers/triggerRegistrationsYTDReport.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  triggerDisputeEnrollmentsYTD:
    handler: src/triggers/triggerDisputeEnrollmentsYTD.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  triggerDisputeAnalytics:
    handler: src/triggers/triggerDisputeAnalytics.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  triggerUserAggregatedMetricsReport:
    handler: src/triggers/triggerUserAggregatedMetricsReport.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'

  # SINGLE THREAD
  userRegistrations:
    handler: src/handlers/compilers/reportRegisteredUsers.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - schedule: cron(0 8 * * ? *)
  reportFailedCount:
    handler: src/handlers/compilers/reportFailedCount.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  reportDuplicateFulfills:
    handler: src/handlers/compilers/reportDuplicateFulfills.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    memorySize: 1024
  disableCancelledUsers:
    handler: src/handlers/compilers/disableCancelledUsers.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  userEnrollments:
    handler: src/handlers/compilers/reportEnrollments.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  reportEnrollmentDisconnect:
    handler: src/handlers/compilers/reportEnrollmentDisconnect.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  userOnboardingErrors:
    handler: src/handlers/compilers/reportOnboardingErrors.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  userSuspensions:
    handler: src/handlers/compilers/reportSuspendedUsers.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  disableStaleUsers:
    handler: src/handlers/compilers/disableStaleUsers.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  reportFailedFulfills:
    handler: src/handlers/compilers/reportFailedFulfills.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  reportAllDisputes:
    handler: src/handlers/compilers/reportAllDisputes.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'

  # FIXERS
  findNotSentReferralEmails:
    handler: src/handlers/fixers/findNotSentReferralEmails.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
  fixDisputeEnrollmentKeys:
    handler: src/handlers/fixers/fixDisputeEnrollmentKeys.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'

resources:
  Resources:
    OpsBatchSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.stage}-ops-batch-topic

    # Create our 'MailchimpQueue' Dead Letter Queue SQS queue
    OpsBatchQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.stage}-ops-batch-dlq
        ReceiveMessageWaitTimeSeconds: 20

    # Create our 'MailchimpQueue' SQS queue
    OpsBatchQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:provider.stage}-ops-batch-sqs
        ReceiveMessageWaitTimeSeconds: 20
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt
            - OpsBatchQueueDLQ
            - Arn
          maxReceiveCount: 3
        VisibilityTimeout: 720

    # Create our queue policy for the 'MailchimpQueue'
    SnsToOpsBatchQueueSqsPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: 'allow-sns-messages'
              Effect: Allow
              Principal: '*'
              Resource: !GetAtt
                - OpsBatchQueue
                - Arn
              Action: 'SQS:SendMessage'
              Condition:
                ArnEquals:
                  'aws:SourceArn': ${self:provider.environment.OPSBATCH_SNS_ARN}
        Queues:
          - Ref: OpsBatchQueue

    # Create the subscription to the 'queue
    OpsBatchQueueSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: ${self:provider.environment.OPSBATCH_SNS_ARN}
        Endpoint: !GetAtt
          - OpsBatchQueue
          - Arn
        Protocol: sqs
        FilterPolicy:
          service:
            - opsbatch
            - enrollmentreport
            - noreportreport
            - failurereport
            - actionsreport
            - disputeenrollmentreport
            - authenticationcalls
            - failedfulfillreport
            - referralsreport
            - monthlyloginreport
            - registeredusersreport
            - useremployerall
            - usermetricsreport
            - missingdisputekeys
            - disputeerrors
            - disputeanalytics
        RawMessageDelivery: 'true'

    OpsReports:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: 'reportId'
            AttributeType: 'S'
          - AttributeName: 'recordId'
            AttributeType: 'S'
          - AttributeName: 'batchId'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'reportId'
            KeyType: 'HASH'
          - AttributeName: 'recordId'
            KeyType: 'RANGE'
        GlobalSecondaryIndexes:
          - IndexName: batchIdReportId-index
            KeySchema:
              - AttributeName: batchId
                KeyType: 'HASH'
              - AttributeName: reportId
                KeyType: 'RANGE'
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: OpsReports
        StreamSpecification:
          StreamViewType: NEW_IMAGE
