# frameworkVersion: '2.15.0'
service: user-reporting-resources

package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-pseudo-parameters
  - serverless-dotenv-plugin

custom:
  stage: ${opt:stage, self:provider.stage}
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  environment:
    STAGE: ${opt:stage, self:provider.stage}
    OPSBATCH_SNS_ARN: !Ref OpsBatchSNSTopic

resources:
  Resources:
    OpsBatchSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.stage}-ops-batch-topic

    # Create our 'MailchimpQueue' Dead Letter Queue SQS queue
    OpsBatchQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.stage}-ops-batch-dlq
        ReceiveMessageWaitTimeSeconds: 20

    # Create our 'MailchimpQueue' SQS queue
    OpsBatchQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:provider.stage}-ops-batch-sqs
        ReceiveMessageWaitTimeSeconds: 20
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt
            - OpsBatchQueueDLQ
            - Arn
          maxReceiveCount: 3
        VisibilityTimeout: 720

    # Create our queue policy for the 'MailchimpQueue'
    SnsToOpsBatchQueueSqsPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: 'allow-sns-messages'
              Effect: Allow
              Principal: '*'
              Resource: !GetAtt
                - OpsBatchQueue
                - Arn
              Action: 'SQS:SendMessage'
              Condition:
                ArnEquals:
                  'aws:SourceArn': ${self:provider.environment.OPSBATCH_SNS_ARN}
        Queues:
          - Ref: OpsBatchQueue

    # Create the subscription to the 'queue
    OpsBatchQueueSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: ${self:provider.environment.OPSBATCH_SNS_ARN}
        Endpoint: !GetAtt
          - OpsBatchQueue
          - Arn
        Protocol: sqs
        FilterPolicy:
          service:
            - opsbatch
            - enrollmentreport
            - noreportreport
            - failurereport
            - actionsreport
            - disputeenrollmentreport
            - authenticationcalls
            - failedfulfillreport
            - referralsreport
            - monthlyloginreport
            - registeredusersreport
            - useremployerall
            - usermetricsreport
            - missingdisputekeys
            - disputeerrors
            - disputeanalytics
        RawMessageDelivery: 'true'

    OpsReports:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: 'reportId'
            AttributeType: 'S'
          - AttributeName: 'recordId'
            AttributeType: 'S'
          - AttributeName: 'batchId'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'reportId'
            KeyType: 'HASH'
          - AttributeName: 'recordId'
            KeyType: 'RANGE'
        GlobalSecondaryIndexes:
          - IndexName: batchIdReportId-index
            KeySchema:
              - AttributeName: batchId
                KeyType: 'HASH'
              - AttributeName: reportId
                KeyType: 'RANGE'
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: OpsReports
        StreamSpecification:
          StreamViewType: NEW_IMAGE

  Outputs:
    OpsReportsTable:
      Description: 'Ops Reports table'
      Value: !Ref OpsReports
      Export:
        Name: !Sub '${self:stage}-ops-report-table'
    OpsBatchQueueArn:
      Description: 'Ops Batch queue ARN'
      Value: !GetAtt OpsBatchQueue.Arn
      Export:
        Name: !Sub '${self:service}-sqs-arn'
    OpsBatchSNSTopicArn:
      Description: 'Ops Batch SNS ARN'
      Value: !Ref OpsBatchSNSTopic
      Export:
        Name: !Sub '${self:service}-sns-arn'
