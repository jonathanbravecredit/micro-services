# NOTE: update this with your service name
service: waitlist-service-api
frameworkVersion: "^2.15.0"

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-deployment-bucket

custom:
  deploymentBucketName: ${self:service}-deployment-bucket-${opt:stage, 'dev'}
  accessLogBucketName: analytics-access-logging-bucket-${opt:stage, 'dev'}
  deploymentBucket:
    versioning: true
    blockPublicAccess: true
    accessLog:
      bucket: ${self:custom.accessLogBucketName}
      prefix: ""
  settings:
    POOL:
      dev: "us-east-2_beTcykTM9"
      qa: "us-east-2_beTcykTM9"
      staging: "us-east-2_80pbK9Kx7"
      prod: "us-east-2_R22DawoAR"
  bundle:
    aliases:
      - "libs": libs
      - "src": src
      - "tests": tests

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  environment:
    STAGE: ${opt:stage, 'dev'}
    POOL: ${self:custom.settings.POOL.${opt:stage}}
  apiGateway:
    restApiId: !ImportValue web-api-resources-apigw-id
    restApiRootResourceId: !ImportValue web-api-resources-apigw-rootresource
  iamRoleStatements:
    - Effect: "Allow"
      Action: "sns:Publish"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "cognito-idp:ListUsers"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - dynamodb:ListStreams
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Waitlist"
        - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Waitlist/index/*"

functions:
  getAccountByEmail:
    handler: src/account/getAccountByEmail.main
    onError: !Sub "arn:aws:sns:${self:provider.region}:${AWS::AccountId}:lambdadeadletterqueue"
    events:
      - http:
          path: /waitlist/account/{email}
          method: get
          cors: true
          authorizer: aws_iam
  postAccount:
    handler: src/account/postAccount.main
    onError: !Sub "arn:aws:sns:${self:provider.region}:${AWS::AccountId}:lambdadeadletterqueue"
    events:
      - http:
          path: /waitlist/account
          method: post
          cors: true
          authorizer: aws_iam
