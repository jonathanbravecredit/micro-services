# NOTE: update this with your service name
service: account-monitor-api

# Create an optimized package for our functions
package:
  individually: true

custom:
  bundle:
    linting: false
    aliases:
      - 'libs': libs
      - 'src': src
      - 'tests': tests
  settings:
    APPDATA:
      dev: 'AppData-rr5wtr4ev5exlbutrkih3r5lhq-dev'
      prod: 'AppData-4tpaga7rzjayhk75opsmpeurme-prod'

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  environment:
    OUR_ENV: ${self:provider.stage}
    APPDATA: '${self:custom.settings.APPDATA.${opt:stage}}'
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource:
        - !Sub 'arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:provider.environment.APPDATA}'
        - !Sub 'arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:provider.environment.APPDATA}/index/*'
    - Effect: 'Allow'
      Action:
        - cognito-idp:ListUsers
        - cognito-idp:AdminDisableUser
        - cognito-idp:AdminDeleteUser
        - cognito-idp:AdminGetUser
      Resource: 'arn:aws:cognito-idp:${self:provider.region}:#{AWS::AccountId}:userpool/*'
    - Effect: 'Allow'
      Action: 'sns:Publish'
      Resource: '*'

functions:
  # User tracked initiatives
  reactivateAccounts:
    handler: src/scheduled/reactivateAccounts.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - schedule: cron(0 9 * * ? *)
