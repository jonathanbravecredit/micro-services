# NOTE: update this with your service name
service: analytic-service

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  bundle:
    linting: false
  settings:
    POOLS:
      dev: 'us-east-2_beTcykTM9'
      qa: 'us-east-2_beTcykTM9'
      staging: 'us-east-2_80pbK9Kx7'
      prod: 'us-east-2_R22DawoAR'
    APPDATA:
      dev: 'AppData-rr5wtr4ev5exlbutrkih3r5lhq-dev'
      qa: 'AppData-rr5wtr4ev5exlbutrkih3r5lhq-dev'
      staging: 'AppData-mza6aevpsvef5btykbyjp5ffdm-staging'
      prod: 'AppData-4tpaga7rzjayhk75opsmpeurme-prod'

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  environment:
    STAGE: ${opt:stage, 'dev'}
    POOL: '${self:custom.settings.POOLS.${opt:stage}}'
    APPDATA: '${self:custom.settings.APPDATA.${opt:stage}}'
    CREDIT_SCORE_TABLE: CreditScoreTrackings
    CREDIT_SCORE_STREAM: 'GetAtt:CreditScoreTrackings;StreamArn'
  apiGateway:
    restApiId: !ImportValue web-api-resources-apigw-id
    restApiRootResourceId: !ImportValue web-api-resources-apigw-rootresource
  iamRoleStatements:
    - Effect: 'Allow'
      Action: 'sns:Publish'
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - 'ses:SendEmail'
        - 'ses:SendRawEmail'
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - dynamodb:ListStreams
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Referrals'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Analytics'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Disputes'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/InvestigationResults'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/CreditScoreTrackings'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/CreditScores'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.APPDATA}'

functions:
  # api
  createTracking:
    handler: src/api/tracking/create.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - http:
          path: /tracking
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !ImportValue web-api-resources-apigw-authorizer
  getTracking:
    handler: src/api/tracking/get.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - http:
          path: /tracking
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !ImportValue web-api-resources-apigw-authorizer
  updateTracking:
    handler: src/api/tracking/update.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - http:
          path: /tracking
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !ImportValue web-api-resources-apigw-authorizer
  deleteTracking:
    handler: src/api/tracking/update.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - http:
          path: /tracking
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !ImportValue web-api-resources-apigw-authorizer

  # triggers
  triggerScoreTracking:
    handler: src/triggers/scores/triggerScoreTracking.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn: !ImportValue agency-services-transunion-creditscoretrackings-stream
  monitorInvestigationResults:
    handler: src/triggers/investigationresults/monitorInvestigationResults.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn: !ImportValue agency-services-transunion-investigationresults-stream

  # manual
  userSummary:
    handler: src/handlers/reports/user-summary.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    timeout: 900
  manuallyCreateEvents:
    handler: src/handlers/manual/manuallyCreateEvents.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    timeout: 300
  creditScoreTracking:
    handler: src/handlers/reports/credit-score-tracking.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    timeout: 300

resources:
  Resources:
    Analytics:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
          - AttributeName: 'event'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
          - AttributeName: 'event'
            KeyType: 'RANGE'
        BillingMode: PAY_PER_REQUEST
        TableName: Analytics
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    CreditScores:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
          - AttributeName: 'scoreId'
            AttributeType: 'N'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
          - AttributeName: 'scoreId'
            KeyType: 'RANGE'
        BillingMode: PAY_PER_REQUEST
        TableName: CreditScores
        StreamSpecification:
          StreamViewType: NEW_IMAGE

  Outputs:
    AnalyticsTable:
      Description: 'Analytics Table'
      Value: !Ref Analytics
      Export:
        Name: !Sub '${self:service}-analytics'
    AnalyticsTableStreamArn:
      Value: { 'Fn::GetAtt': ['Analytics', 'StreamArn'] }
      Export:
        Name: !Sub '${self:service}-analytics-stream'
