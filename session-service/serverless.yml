# NOTE: update this with your service name
service: session-service

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  bundle:
    linting: false
  settings:
    POOL_IDS:
      dev: 'us-east-2_beTcykTM9'
      qa: 'us-east-2_beTcykTM9'
      staging: 'us-east-2_6RQqasoH3'
      prod: 'us-east-2_R22DawoAR'

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  environment:
    STAGE: ${opt:stage, 'dev'}
    POOL_ID: '${self:custom.settings.POOL_IDS.${opt:stage}}'
    REFERRAL_TOPIC_ARN: !ImportValue 'referral-service-referrals-sns-topic'
  apiGateway:
    restApiId: !ImportValue web-api-resources-apigw-id
    restApiRootResourceId: !ImportValue web-api-resources-apigw-rootresource
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:ListStreams
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Sessions'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Sessions/index/*'
    - Effect: 'Allow'
      Action: 'sns:Publish'
      Resource: '*'

functions:
  createSessionData:
    handler: src/api/create.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - http:
          path: /sessions
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !ImportValue web-api-resources-apigw-authorizer

  getSessionData:
    handler: src/api/get.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - http:
          path: /sessions/{sessionId}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !ImportValue web-api-resources-apigw-authorizer

  updateSessionData:
    handler: src/api/update.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - http:
          path: /sessions/{sessionId}
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !ImportValue web-api-resources-apigw-authorizer
  getAllSessionData:
    handler: src/api/getAll.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - http:
          path: /sessions
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !ImportValue web-api-resources-apigw-authorizer
          request:
            parameters:
              querystrings:
                limit: true
                sort: true
  # handlers
  sessionPub:
    handler: src/handlers/sessionPub.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: LATEST
          arn: { 'Fn::GetAtt': ['Sessions', 'StreamArn'] }

  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}
resources:
  Resources:
    Sessions:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: 'userId'
            AttributeType: 'S'
          - AttributeName: 'sessionId'
            AttributeType: 'S'
          - AttributeName: 'sessionDate'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'userId'
            KeyType: 'HASH'
          - AttributeName: 'sessionId'
            KeyType: 'RANGE'
        GlobalSecondaryIndexes:
          - IndexName: userIdSessionDate-index
            KeySchema:
              - AttributeName: userId
                KeyType: 'HASH'
              - AttributeName: sessionDate
                KeyType: 'RANGE'
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: Sessions
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

  Outputs:
    SessionTable:
      Description: 'Sessions Table'
      Value: !Ref Sessions
      Export:
        Name: !Sub '${self:service}-sessions'
    SessionsTableStreamArn:
      Value: { 'Fn::GetAtt': ['Sessions', 'StreamArn'] }
      Export:
        Name: !Sub '${self:service}-sessions-stream'
