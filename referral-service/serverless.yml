# NOTE: update this with your service name
service: referral-service

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  bundle:
    linting: false
    externals: all
  settings:
    IDENTITY_IDS:
      dev: 'us-east-2:69169c15-c0c4-4e0b-886c-4afab307e612'
      qa: 'us-east-2:69169c15-c0c4-4e0b-886c-4afab307e612'
      prod: 'us-east-2:ea31caf7-0945-4607-a3c4-0c9942967a32'
    POOL_IDS:
      dev: 'us-east-2_beTcykTM9'
      qa: 'us-east-2_beTcykTM9'
      prod: 'us-east-2_R22DawoAR'

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  environment:
    NODE_ENV: ${opt:stage, 'dev'}
    ACCOUNT_ID: !Sub '${AWS::AccountId}'
    IDENTITY_ID: '${self:custom.settings.IDENTITY_IDS.${opt:stage}}'
    POOL_ID: '${self:custom.settings.POOL_IDS.${opt:stage}}'
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - secretsmanager:GetSecretValue
      Resource:
        - '*'
    - Effect: 'Allow'
      Action: 'sns:Publish'
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - dynamodb:ListStreams
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Referrals'

functions:
  createReferral:
    handler: src/api/referrals/create.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - http:
          path: /referral
          method: post
          cors: true
          authorizer: aws_iam
  getReferral:
    handler: src/api/referrals/get.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - http:
          path: /referral
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  updateReferral:
    handler: src/api/referrals/update.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - http:
          path: /referral
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  deleteReferral:
    handler: src/api/referrals/update.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - http:
          path: /referral
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  eligibleReferrals:
    handler: src/handlers/reports/eligibleReferrals.main
    onError: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:lambdadeadletterqueue'
    events:
      - schedule: cron(0 8 * * ? *) # turning off

resources:
  Resources:
    Referrals:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
        BillingMode: PAY_PER_REQUEST
        TableName: Referrals
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: referral-authorizer
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${self:custom.settings.POOL_IDS.${opt:stage}}'

  Outputs:
    ReferralsTable:
      Description: 'Referrals Table'
      Value: !Ref Referrals
      Export:
        Name: !Sub '${self:service}-referrals'
    ReferralsTableStreamArn:
      Value: { 'Fn::GetAtt': ['Referrals', 'StreamArn'] }
      Export:
        Name: !Sub '${self:service}-referrals-stream'
